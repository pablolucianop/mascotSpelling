{"version":3,"sources":["Child.js","CardPoke.js","App.js","serviceWorker.js","index.js"],"names":["Child","handleSubmitClick2","useState","stateSearch","changeStateSearch","_name","value","props","inputSearch","handleSubmitClick","name","toLowerCase","type","ref","input","onClick","this","Component","CardPoke","Row","pokeInfoOrganized","map","num","Card","style","width","Img","variant","src","Body","Title","Text","BadgeConditional","isLoggedIn","length","howMany","Badge","App","changePokeInfoOrganized","React","useEffect","axios","get","then","response","arrayOfSpecs","JSON","stringify","data","sprites","front_default","substring","weight","base_experience","catch","error","alert","className","xx","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAoCeA,E,2MA3BXC,mBAAqB,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBAChBC,EADgB,MAKvBC,EALuB,MAGV,EAAKC,MAAMC,OAGxB,EAAKC,MAAMC,YAAYL,I,EAG3BM,kBAAoB,WAEhB,IAAMC,EAAO,EAAKL,MAAMC,MAGxB,EAAKC,MAAMC,YAAYE,EAAKC,gB,wEAGtB,IAAD,OACL,OACI,6BACI,2BAAOC,KAAK,OAAOC,IAAK,SAAAC,GAAK,OAAI,EAAKT,MAAQS,KAC9C,4BAAQC,QAASC,KAAKP,mBAAtB,kB,GAvBIQ,a,uBCwBLC,MAzBf,SAAkBX,GAsBd,OArBU,kBAACY,EAAA,EAAD,KACLZ,EAAMa,kBAAkBC,KAAI,SAACC,GAC1B,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKN,EAAI,KACjC,kBAACC,EAAA,EAAKM,KAAN,KACI,kBAACN,EAAA,EAAKO,MAAN,KAAaR,EAAI,IACjB,kBAACC,EAAA,EAAKQ,KAAN,KACI,6BACA,sCAAeT,EAAI,GACnB,6BACJ,wCAAiBA,EAAI,Y,yBCTjD,SAASU,EAAiBzB,GACxB,IAAM0B,EAAa1B,EAAM0B,WAAWC,OAAS,EACvCC,EAAU5B,EAAM0B,WAAWC,OACjC,OAAID,EACK,kBAACG,EAAA,EAAD,CAAOT,QAAQ,QAAQQ,EAAvB,MAEF,KAmDME,MA7Cf,WAAgB,IAAD,EAGwCnC,mBAAS,IAHjD,mBAGNkB,EAHM,KAGakB,EAHb,OAI4BpC,mBAAS,IAJrC,mBAINC,EAJM,KAIOC,EAJP,KAmCb,OAlBAmC,IAAMC,WAAU,WAIVrC,EAAY+B,OAAO,GAEvBO,IAAMC,IAAN,4CAA+CvC,EAA/C,MACGwC,MAAK,SAAUC,GACd,IAKIC,EAAe,CALPC,KAAKC,UAAUH,EAASI,KAAKC,QAAQC,eAAeC,UAAU,EAAGL,KAAKC,UAAUH,EAASI,KAAKC,QAAQC,eAAehB,OAAS,GAC/HY,KAAKC,UAAUH,EAASI,KAAKtC,MAAMyC,UAAU,EAAGL,KAAKC,UAAUH,EAASI,KAAKtC,MAAMwB,OAAS,GAC1FY,KAAKC,UAAUH,EAASI,KAAKI,QACpBN,KAAKC,UAAUH,EAASI,KAAKK,kBAGnDf,EAAwB,GAAD,mBAAKlB,GAAL,CAAwByB,QAC9CS,OAAM,SAAAC,GAAWC,MAAMrD,EAAc,0BAfA,CAACA,IAmB3C,yBAAKsD,UAAU,eACb,+DAAqC,kBAACzB,EAAD,CAAkBC,WAAab,KACpE,6BACA,kBAAC,EAAD,CAAOZ,YAhCX,SAAuBkD,GAGrBtD,EAAkBsD,GAElBC,QAAQC,IAAIF,EAAI,OAEhBC,QAAQC,IAAIzD,EAAa,4BA0BvB,kBAAC,EAAD,CAAUiB,kBAAmBA,MClDfyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.25ad6c44.chunk.js","sourcesContent":["import React, { useState, Component } from 'react';\r\n\r\nimport './App.css';\r\nimport './App';\r\n\r\n\r\n\r\nclass Child extends Component {\r\n\r\n    handleSubmitClick2 = () => {\r\n        const [stateSearch, changeStateSearch] = useState([])\r\n\r\n        const name = this._name.value;\r\n        // do something with `name`\r\n        changeStateSearch(name)\r\n        this.props.inputSearch(stateSearch)\r\n    }\r\n    \r\n    handleSubmitClick = () => {\r\n        \r\n        const name = this._name.value;\r\n        // do something with `name`\r\n\r\n        this.props.inputSearch(name.toLowerCase())\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\" ref={input => this._name = input} />\r\n                <button onClick={this.handleSubmitClick}>check it!</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Child;","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/row';\r\n\r\nfunction CardPoke(props) {\r\n    const a = <Row>\r\n        {props.pokeInfoOrganized.map((num) => {\r\n            return (\r\n                <div >\r\n                    <Card style={{ width: '10rem' }}>\r\n                        <Card.Img variant=\"top\" src={num[0]} />\r\n                        <Card.Body>\r\n                            <Card.Title>{num[1]}</Card.Title>\r\n                            <Card.Text>\r\n                                <br/>\r\n                                <b>weight:</b>{num[2]}\r\n                                <br/>\r\n                            <b>base exp:</b>{num[3]}\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n            )\r\n        }\r\n        )}\r\n    </Row >\r\n    return ( a );\r\n}\r\n\r\nexport default CardPoke;\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport Child from './Child';\nimport CardPoke from './CardPoke';\nimport axios from 'axios'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Badge from 'react-bootstrap/badge';\n\n\n\nfunction BadgeConditional(props) {\n  const isLoggedIn = props.isLoggedIn.length > 0;\n  const howMany = props.isLoggedIn.length\n  if (isLoggedIn) {\n    return <Badge variant=\"info\">{howMany}  </Badge>;\n  }\n  return null;\n}\n\n\n\n\nfunction App() {\n \n\n  const [pokeInfoOrganized, changePokeInfoOrganized] = useState([])\n  const [stateSearch, changeStateSearch] = useState([]);\n  \n\n  function searchToState(xx) {\n    \n    \n    changeStateSearch(xx)\n\n    console.log(xx, ' xx')\n\n    console.log(stateSearch, ' esta es state search')\n  }\n\n  React.useEffect(() => { getPokemonInfo() }, [stateSearch]);\n\n  function getPokemonInfo() {\n\n    if (stateSearch.length>0){\n    \n    axios.get(`https://pokeapi.co/api/v2/pokemon/${stateSearch}/`)\n      .then(function (response) {\n        let image = JSON.stringify(response.data.sprites.front_default).substring(1, JSON.stringify(response.data.sprites.front_default).length - 1)\n        let name = JSON.stringify(response.data.name).substring(1, JSON.stringify(response.data.name).length - 1)\n        let weight = JSON.stringify(response.data.weight)\n        let base_experience = JSON.stringify(response.data.base_experience)\n\n        let arrayOfSpecs = [image, name, weight, base_experience]\n        changePokeInfoOrganized([...pokeInfoOrganized, arrayOfSpecs])\n      }).catch(error => { alert(stateSearch + ' is not a pokemon') })\n  }\n}\n  return (\n    <div className=\"text-center\">\n      <h1 >How many pokemons can you name? <BadgeConditional isLoggedIn={(pokeInfoOrganized)} /></h1>\n      <br />\n      <Child inputSearch={searchToState}/>\n      <CardPoke pokeInfoOrganized={pokeInfoOrganized} />   \n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}